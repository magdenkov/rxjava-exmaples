import com.github.jhonnymertz.wkhtmltopdf.wrapper.Pdf;
import com.github.jhonnymertz.wkhtmltopdf.wrapper.page.PageType;
import com.github.jhonnymertz.wkhtmltopdf.wrapper.params.Param;
import rx.Observable;
import rx.schedulers.Schedulers;

import java.io.IOException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {
    public boolean someLibraryMethod() throws ExecutionException, InterruptedException {
        System.out.println("current main thread before future " + Thread.currentThread());

        Future<String> ss = Observable.just("1")
                .subscribeOn(Schedulers.io())
                .map(s -> {
                    try {
                        Thread.currentThread().sleep(4000l);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    System.out.println("Current thread in ObservableFuture " + Thread.currentThread());
                    return s + s;
                })
                .toSingle().toBlocking().toFuture();

        System.out.println("Current main thread after first future 1111" + Thread.currentThread());


        Future<String> ss2 = Observable.just("2")
                .subscribeOn(Schedulers.io())
                .map(s -> {

                    try {
                        Thread.currentThread().sleep(1000l);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    System.out.println("Current thread in ObservableFuture 22222 " + Thread.currentThread());
                    return s + s;
                })

                .toSingle().toBlocking().toFuture();

        System.out.println("Current main thread  after second fuutre" + Thread.currentThread());

        System.out.println("Results on Second" + ss2.get());
        System.out.println("Results on first" + ss.get());
        return true;
    }


    public static void main(String[] args) throws ExecutionException, InterruptedException, IOException {

//        Pdf pdf = new Pdf();
//
////        pdf.addPage("<html><head><meta charset=\"utf-8\"></head><h1>MÃ¼ller</h1></html>", PageType.htmlAsString);
////        pdf.addPage("http://www.google.com", PageType.url);
//
//        pdf.addPageFromUrl("http://localhost:63343/untitled/src/js/soda.html?_ijt=7r8fl5cajuk05un203mkauoq6k");
//
//// Add a Table of contents
//        pdf.addToc();
//
//// The `wkhtmltopdf` shell command accepts different types of options such as global, page, headers and footers, and toc. Please see `wkhtmltopdf -H` for a full explanation.
//// All options are passed as array, for example:
//        pdf.addParam(new Param("--no-footer-line"), new Param("--header-html", "file:///header.html"));
//        pdf.addParam(new Param("--enable-javascript"));
//
//// Save the PDF
//        pdf.saveAs("output.pdf");



//        ss.get();
    }
}
